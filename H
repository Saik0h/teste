#!/usr/bin/env node
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const args = process.argv.slice(2);
const [command, type, resourceName] = args;

if (!command) {
  console.log("Comando obrigatÃ³rio. Ex: H gen res <ResourceName>");
  process.exit(1);
}

function generateApp(appName) {
  const baseDir = path.join(process.cwd(), appName);
  const appTemplateFile = path.join(__dirname, "templates", "app.template.js");

  ["public", "src", "src/core", "src/modules", "src/app"].forEach((folder) => {
    fs.mkdirSync(path.join(baseDir, folder), { recursive: true });
  });

  
  ["controller.js", "module.js", "service.js",].forEach((file)=>{
    let content = fs.readFileSync(path.join(__dirname, "templates", "resource", file))
    const outputPath = path.join(baseDir, "src/app/", `app.${file}`)
    fs.writeFileSync(outputPath, content, "utf-8" )
  })
  let appTemplate = fs.readFileSync(appTemplateFile, "utf-8");
  fs.writeFileSync(path.join(baseDir, "main.js"), appTemplate, "utf-8");

  console.log(`App "${appName}" generated successfully at ${baseDir}`);
}
function generateFromTemplate(templateFile, outputFile, replacements) {
  const templatePath = path.join(__dirname, "templates", templateFile);
  let content = fs.readFileSync(templatePath, "utf-8");
  for (const key in replacements) {
    content = content.replace(new RegExp(`{{${key}}}`, "g"), replacements[key]);
  }
  fs.writeFileSync(outputFile, content, "utf-8");
  console.log(`ðŸ“„ Created file: ${outputFile}`);
}

function generateResource(name) {
  const Name = name.charAt(0).toUpperCase() + name.slice(1);
  const lower = name.toLowerCase();

  const srcDir = path.join(__dirname, "src");
  const controllerDir = path.join(srcDir, "controllers");
  const serviceDir = path.join(srcDir, "services");
  const routesDir = path.join(srcDir, "routes");

  [controllerDir, serviceDir, routesDir].forEach((d) => {
    if (!fs.existsSync(d)) fs.mkdirSync(d, { recursive: true });
  });

  generateFromTemplate(
    "controller.js",
    path.join(controllerDir, `${lower}.controller.js`),
    { Name, name: lower }
  );
  generateFromTemplate(
    "service.js",
    path.join(serviceDir, `${lower}.service.js`),
    { Name, name: lower }
  );
  generateFromTemplate(
    "routes.js",
    path.join(routesDir, `${lower}.routes.js`),
    { Name, name: lower }
  );

  const appFile = path.join(srcDir, "app.js");
  let appContent = fs.readFileSync(appFile, "utf-8");
  const importLine = `const ${lower}Routes = require("./routes/${lower}.routes");`;
  const useLine = `app.use("/${lower}", ${lower}Routes);`;

  if (!appContent.includes(importLine)) {
    appContent = importLine + "\n" + appContent;
  }
  if (!appContent.includes(useLine)) {
    appContent = appContent.replace(
      /module\.exports\s*=\s*app;/,
      `${useLine}\n\nmodule.exports = app;`
    );
  }
  fs.writeFileSync(appFile, appContent, "utf-8");
  console.log(`ðŸš€ Updated app.js to register /${lower} route`);
}

if (command === "create" && type === "app") {
  generateApp(resourceName);
} else if (command === "gen" && type === "res" && resourceName) {
  generateResource(resourceName);
} else if (command === "help" && !resourceName) {
  console.log("Comandos disponÃ­veis:");
  console.log(args);
  console.log(
    "H gen res <ResourceName> - Gera um novo recurso com controller, service e rotas."
  );
  console.log("H init help - Mostra esta mensagem de ajuda.");
} else {
  console.log("Uso: H gen res <ResourceName>");
  process.exit(1);
}
